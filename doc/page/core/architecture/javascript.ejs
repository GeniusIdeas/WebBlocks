<h2>Javascript</h2>

<p>In order to avoid name conflicts and avoid polluting the global namespace, WebBlocks defines a jQuery method that acts as a container to encapsulate all WebBlocks Javascript functions.</p>

<h3>Usage</h3>

<p>The <code>jQuery.fn.blocks()</code> method returns a jQuery object with the WebBlocks methods:</p>

<pre class="prettyprint">$(ele).blocks();</pre>

<p>Methods may be defined under this namespace using <code>jQuery.fn.addBlocksMethod()</code>:</p>

<pre class="prettyprint">$(document).addBlocksMethod('example', function(){ /* .. */ });</pre>

<p>This is then invoked such as:</p>

<pre class="prettyprint">$(ele).blocks().example();</pre>

<h3>Examples</h3>

<h4>Accessing Methods</h4>

<p>This is how WebBlocks initializes and reflows <a href="#API/Entity/Nav/Bar">Entity/Nav/Bar</a>:</p>

<pre class="prettyprint">$(window).load(function(){

    $('nav.bar').blocks().navbar('init');

    $(window).resize(function(){
        $('nav.bar').blocks().navbar('reflow');
    });

});</pre>

<p>If a <code>nav.bar</code> is created after the <code>load</code> event, then it will not be initialized as such; instead, one can call the initializer method directly:</p>

<pre class="prettyprint">$('body').prepend('&lt;nav class="bar" id="topbar"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/nav&gt;');
$('#topbar ul').append('&lt;li&gt;&lt;a&gt;Link Item 1&lt;/a&gt;&lt;/li&gt;');
$('#topbar ul').append('&lt;li&gt;&lt;a&gt;Link Item 2&lt;/a&gt;&lt;/li&gt;');
$('#topbar ul').append('&lt;li&gt;&lt;a&gt;Link Item 3&lt;/a&gt;&lt;/li&gt;');

$('#topbar').blocks().navbar('init');

$(window).resize(function(){
    $('#topbar').block().navbar('reflow');
})</pre>

<h4>Custom Methods</h4>

<p>Suppose one wants to add a method that will logs all form values to the console:</p>

<pre class="prettyprint">$(document).addBlocksMethod('logFormValues',function(){

    $(this).each(function(){
        $(this).find('input[name],select[name],textarea[name]').each(function(){
            console.log($(this).val());
        })
    });

})</pre>

<p>This method could then be called to log a form before it submits:</p>

<pre class="prettyprint">$('form').submit(function(){

    $(this).blocks().logFormValues();

})</pre>

<h4>Without jQuery</h4>

<p>While modules may include functionality that will not work without jQuery, they should be written in such a way that they will not break the DOM or cause fatal Javascript errors.</p>

<p>The former requires thoughtful design decisions about markup and CSS; the latter can be achieved by warning that jQuery is a required package and wrapping the jQuery method definitions and instantiations as follows:

<pre class="prettyprint">//!requires_package jquery

typeof jQuery != 'undefined' && (function ($, window, document, undefined) {

    $(document).addBlocksMethod('example',function(command){
        /* .. */
    });

    $(window).load(function(){

        $('#example').blocks().example();

    });

})(jQuery, window, document);</pre>

This will avoid the block from running if jQuery is not included.